# Generated by Django 5.2.7 on 2025-10-01 17:27

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("forms", "0001_initial"),
        ("projects", "0001_initial"),
    ]

    operations = [
        migrations.AddField(
            model_name="question",
            name="assigned_commodity",
            field=models.CharField(
                blank=True,
                help_text="Commodity this question was generated for",
                max_length=50,
            ),
        ),
        migrations.AddField(
            model_name="question",
            name="assigned_country",
            field=models.CharField(
                blank=True,
                help_text="Country this question was generated for",
                max_length=100,
            ),
        ),
        migrations.AddField(
            model_name="question",
            name="assigned_respondent_type",
            field=models.CharField(
                blank=True,
                help_text="Respondent type this question was generated for",
                max_length=50,
            ),
        ),
        migrations.CreateModel(
            name="DynamicQuestionSession",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("respondent_type", models.CharField(max_length=50)),
                ("commodity", models.CharField(blank=True, max_length=50)),
                ("country", models.CharField(blank=True, max_length=100)),
                ("categories", models.JSONField(blank=True, default=list)),
                ("work_packages", models.JSONField(blank=True, default=list)),
                ("questions_generated", models.PositiveIntegerField(default=0)),
                (
                    "questions_from_partners",
                    models.JSONField(
                        default=dict,
                        help_text="Count of questions from each research partner",
                    ),
                ),
                ("created_by", models.CharField(blank=True, max_length=200)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("notes", models.TextField(blank=True)),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="question_generation_sessions",
                        to="projects.project",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="QuestionBank",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "question_text",
                    models.TextField(help_text="The actual question text"),
                ),
                (
                    "question_category",
                    models.CharField(
                        choices=[
                            ("production", "Production"),
                            ("processing", "Processing"),
                            ("distribution", "Distribution"),
                            ("consumption", "Consumption"),
                            ("waste_management", "Waste Management"),
                            ("input_supply", "Input Supply"),
                            ("market_access", "Market Access"),
                            ("quality_standards", "Quality Standards"),
                            ("certification", "Certification"),
                            ("sustainability", "Sustainability"),
                            ("climate_impact", "Climate Impact"),
                            ("social_impact", "Social Impact"),
                            ("economic_impact", "Economic Impact"),
                            ("governance", "Governance"),
                            ("policy", "Policy"),
                            ("technology", "Technology"),
                            ("logistics", "Logistics"),
                            ("finance", "Finance"),
                            ("nutrition", "Nutrition"),
                            ("food_safety", "Food Safety"),
                        ],
                        help_text="Category based on food system value chain",
                        max_length=30,
                    ),
                ),
                (
                    "targeted_respondents",
                    models.JSONField(
                        default=list,
                        help_text="List of respondent types this question targets",
                    ),
                ),
                (
                    "targeted_commodities",
                    models.JSONField(
                        default=list,
                        help_text="List of commodities this question applies to",
                    ),
                ),
                (
                    "targeted_countries",
                    models.JSONField(
                        default=list,
                        help_text="List of countries this question applies to",
                    ),
                ),
                (
                    "data_source",
                    models.CharField(
                        choices=[
                            ("internal", "Internal Research Team"),
                            ("partner_university", "Partner University"),
                            ("partner_ngo", "Partner NGO"),
                            ("partner_government", "Partner Government Agency"),
                            ("partner_private", "Partner Private Organization"),
                            (
                                "partner_international",
                                "Partner International Organization",
                            ),
                            ("consultant", "External Consultant"),
                            ("collaborative", "Collaborative Development"),
                        ],
                        default="internal",
                        help_text="Source/partner who created this question",
                        max_length=30,
                    ),
                ),
                (
                    "research_partner_name",
                    models.CharField(
                        blank=True,
                        help_text="Name of the specific research partner",
                        max_length=200,
                    ),
                ),
                (
                    "research_partner_contact",
                    models.EmailField(
                        blank=True,
                        help_text="Contact email for the research partner",
                        max_length=254,
                    ),
                ),
                (
                    "work_package",
                    models.CharField(
                        blank=True,
                        help_text="Work package identifier for this question",
                        max_length=100,
                    ),
                ),
                (
                    "response_type",
                    models.CharField(
                        choices=[
                            ("text_short", "Short Text"),
                            ("text_long", "Long Text"),
                            ("numeric_integer", "Number (Integer)"),
                            ("numeric_decimal", "Number (Decimal)"),
                            ("scale_rating", "Rating Scale"),
                            ("choice_single", "Single Choice"),
                            ("choice_multiple", "Multiple Choice"),
                            ("date", "Date"),
                            ("datetime", "Date & Time"),
                            ("geopoint", "GPS Location"),
                            ("geoshape", "Geographic Shape"),
                            ("image", "Photo/Image"),
                            ("audio", "Audio Recording"),
                            ("video", "Video Recording"),
                            ("file", "File Upload"),
                            ("signature", "Digital Signature"),
                            ("barcode", "Barcode/QR Code"),
                        ],
                        max_length=20,
                    ),
                ),
                ("is_required", models.BooleanField(default=True)),
                ("allow_multiple", models.BooleanField(default=False)),
                (
                    "options",
                    models.JSONField(
                        blank=True, help_text="For multiple choice questions", null=True
                    ),
                ),
                ("validation_rules", models.JSONField(blank=True, null=True)),
                (
                    "priority_score",
                    models.IntegerField(
                        default=1,
                        help_text="Priority for question selection (1-10, 10 being highest)",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this question is available for dynamic generation",
                    ),
                ),
                (
                    "tags",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Additional tags for question organization",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("created_by", models.CharField(blank=True, max_length=200)),
                (
                    "base_project",
                    models.ForeignKey(
                        blank=True,
                        help_text="Optional base project this question belongs to",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="question_bank_items",
                        to="projects.project",
                    ),
                ),
            ],
            options={
                "ordering": ["-priority_score", "question_category", "created_at"],
            },
        ),
        migrations.AddField(
            model_name="question",
            name="question_bank_source",
            field=models.ForeignKey(
                blank=True,
                help_text="Source QuestionBank item if this question was dynamically generated",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="question_instances",
                to="forms.questionbank",
            ),
        ),
        migrations.AddIndex(
            model_name="questionbank",
            index=models.Index(
                fields=["question_category"], name="forms_quest_questio_82043e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="questionbank",
            index=models.Index(
                fields=["data_source"], name="forms_quest_data_so_a86934_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="questionbank",
            index=models.Index(
                fields=["is_active"], name="forms_quest_is_acti_e58bed_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="questionbank",
            index=models.Index(
                fields=["priority_score"], name="forms_quest_priorit_9dff28_idx"
            ),
        ),
    ]
